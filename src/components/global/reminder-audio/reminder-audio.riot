<reminder-audio>
  <style>
    div:first-child {
      padding: 1rem;
    }
    .stop.button {
      margin-top: 1rem;
    }
    .audio {
      margin: 1rem 0;
    }
    .center {
      text-align: center;
    }
    .full-date {
      font-weight: bold;
    }
    ul {
      list-style: none;
    }
    li input[type=text] {
      width: 8.5rem;
    }
  </style>

  <div>
    <!--
    <div class="row">
      <button onclick={togglePlayPause}>Toggle Play/Pause</button>
    </div>
    -->

    <div class="row">
      <div class="column center">
        <h1>{state.date.toLocaleString()}</h1>
        <img width="800px" src="/assets/images/2022-3-days-retreat-schedule.jpg"/>
      </div>
    </div> 

    <div class="audio row">
      <audio controls class="column column-50 column-offset-20">
        <source if={state.selectedAudio.ogg} src="assets/audio/{state.selectedAudio.ogg}" type="audio/ogg">
        <source src="assets/audio/{state.selectedAudio.mp3}" type="audio/mpeg">
        Your browser does not support the audio element.
      </audio>
      <button class="stop button button-clear column column-10" onclick={stopAudio}>Stop</button>
    </div>
  

    <div class="row">
      <div class="column column-40 column-offset-25">
        <select onchange={onAudioFileChange}>
          <option each={f in state.audioFiles} value="{f.key}" selected={f.key === state.selectedAudio.key ? 'selected' : null}>{f.name}</option>
        </select>
      </div>
    </div>

    <div class="row center">
      <div class="column column-80 column-offset-10">
        <h3 class="center full-date">{state.date}</h3>
      </div>
    </div>

    <div class="row hide">
      <button class="stop button button-clear column" 
        onclick={onStopAudio}>
        {state.bellTimeVisible ? 'Hide Bell Time' : 'Show Bell Time'}
      </button>
    </div>

    <div if={state.bellTimeVisible} class="row center">
      <div class="column">
        <h3>Bell Time</h3>
        <ul>
          <li>Custom</li>
          <li>
            <input type="text" maxlength="8" value={state.customBellTime} autofocus
              onkeyup={onCustomBellTimeInput}/>
          </li>
          <li each={s in state.schedule}>{s}</li>
        </ul>
      </div>
    </div>

  </div>
 
  <script>
    function inRange (date, schedule) {
      const hh = date.getHours()
      const mm = date.getMinutes()
      const ss = date.getSeconds()

      // console.log(hh, mm, ss)
      for (let s of schedule) {
        if (!/:/.test(s)) { continue }
        s = s.split(':')
        if (s.length < 2) { continue }
        if (s.length === 2) { s.push(0) }
        const hh2 = Number(s[0])
        const mm2 = Number(s[1])
        const ss2 = Number(s[2])
        if (hh === hh2 && mm === mm2 && (ss === ss2 || ss + 1 === ss2)) {
          console.log('----------------', hh2, mm2, ss2, '', hh, mm, ss)
          return true
        }
      }
      return false
    }

    function saveItem ({ name, value, type }) {
      if (value && type === 'json') {
        window.localStorage.setItem(name, JSON.stringify(value))
      } else {
        window.localStorage.setItem(name, value)
      }
    }

    function getSavedItem ({ name, type }) {
      const value = window.localStorage.getItem(name)
      if (value && type === 'json') {
        return JSON.parse(value)
      }
      return value
    }

    const schedule = [
      '06:00:00',
      '09:00:00',
      '10:00:00',
      '10:30:00',
      '13:00:00',
      '14:00:00',
      '15:30:00',
      '16:30:00'
    ]

    // for (let i = 19; i <= 23; i++) {
    //   for (let j = 0; j <= 59; j++) {
    //     const m = j < 10 ? '0' + j : j
    //     schedule.push(`${i}:${m}:00`)
    //     // schedule.push(`${i}:${m}:30`)
    //   }
    // }

    export default {
      components: {
      },
      state: {
        paused: false,
        date: new Date(),
        schedule: schedule,
        bellTimeVisible: true,
        customBellTime: getSavedItem({ name: 'customBellTime', type: 'string' }),
        audioFiles: [
          { key: 'WinMetta_Meditation_Timer', name: 'WinMetta Meditation Timer', mp3: 'WinMetta_Meditation_Timer.mp3', ogg: '' },
          { key: 'imc_timer', name: 'Mediation Timer from insightmeditationcenter.org', mp3: 'imc_timer.mp3', ogg: 'imc_timer.ogg' },
          { key: 'omt_chime', name: 'Chime from onlinemeditationtimer.com', mp3: 'omt_chime.mp3', ogg: 'omt_chime.ogg' },
          { key: 'bells-tibetan-daniel_simon', name: 'Bells Tibetan Large by Daniel Simon', mp3: 'bells-tibetan-daniel_simon.mp3', ogg: '' }
        ],
        selectedAudio: getSavedItem({ name: 'selectedAudio', type: 'json' }) ||
          { key: 'WinMetta_Meditation_Timer', name: 'WinMetta Meditation Timer', mp3: 'WinMetta_Meditation_Timer.mp3', ogg: '' }
      },
      onMounted () {
        const $audio = this.$('audio')
        $audio.addEventListener('pause', () => {
          // console.log('pause event', this)
          // audio.currentTime = 0
        })
        $audio.addEventListener('ended', () => {
          console.log('ended event')
          $audio.currentTime = 0
        })
        setInterval(() => {
          const date = new Date()
          const schedule = this.state.schedule.concat(this.state.customBellTime)
          if (inRange(date, schedule)) {
            $audio.play()
          }
          this.update({ date })
        }, 1000)
      },
      stopAudio () {
        const $audio = this.$('audio')
        $audio.pause()
        $audio.currentTime = 0
      },
      onStopAudio () {
        this.update({ bellTimeVisible: !this.state.bellTimeVisible })
      },
      onAudioFileChange (e) {
        // console.log(e);
        const selectedKey = e.target.value
        const selectedAudio = this.state.audioFiles.find(a => a.key === selectedKey)
        const $audio = this.$('audio')

        console.log(selectedAudio)
        this.update({ selectedAudio })
        saveItem({ name: 'selectedAudio', value: selectedAudio, type: 'json' })
        $audio.pause()
        $audio.currentTime = 0
        $audio.load()
      },
      onCustomBellTimeInput (e) {
        const customBellTime = e.target.value.replace(/[^0-9:]/g, '')
        saveItem({ name: 'customBellTime', value: customBellTime, type: 'string' })
        this.update({ customBellTime })
      },
      togglePlayPause () {
        const $audio = this.$('audio')
        const paused = !this.state.paused
        this.update({
          paused
        })
        if (paused) {
          $audio.play()
        } else {
          $audio.pause()
        }
      }
    }
  </script>
</reminder-audio>
